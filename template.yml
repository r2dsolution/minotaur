AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  ComeInDBHost:
    Type: String
    Description: db host
    Default: 'comeindb2.cstlg3ladsl5.ap-southeast-1.rds.amazonaws.com'
  ComeInDBPort:
    Type: String
    Description: db port
    Default: '5432'
  ComeInDBUsername:
    Type: String
    Description: db username
    Default: 'comein'
  ComeInDBPassword:
    Type: String
    Description: db password
    Default: 'q2deqkTna5GyxxHlkR1d'
  ComeInDBInstance:
    Type: String
    Description: db instance
    Default: 'comein'
  ComeInCognitoUserPoolId:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'ap-southeast-1_sH5GQOfGD'
  ComeInCognitoRegion:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'ap-southeast-1'
  ComeInResponseTemplate:
    Type: String
    Description: request-template
    Default: $input.json('$.json-body')
  ComeInRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub":"$context.authorizer.claims.sub"   
        },
      "path-parameters": $allParams.get('path'),
      "query-string-parameters": $allParams.get('querystring'),
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
    
    
    

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:

  ComeInRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      # Body:
        # OpenAPI specification: null
      Description: ComeIn API
      Name: MyComeInAPI
      
  ComeInAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:  
      Name: comein_authorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ComeInRestApi
      IdentitySource: method.request.header.comein_auth
      ProviderARNs: 
        - !Sub arn:aws:cognito-idp:${ComeInCognitoRegion}:${AWS::AccountId}:userpool/${ComeInCognitoUserPoolId}
      
  GetHelloWorldFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-GetHelloWorldFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: getHelloWorld
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword
      Runtime: java11
      Timeout: 30
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get

  PostHelloWorldFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-PostHelloWorldFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: postHelloWorld
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 30
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post

# Start Function - LoadTourTicketByDateFunc  
  LoadTourTicketByDateFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-LoadTourTicketByDateFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: loadTourTicketByDate
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  LoadTourTicketByDatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadTourTicketByDateFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/tour-tickets

  LoadTourTicketByDateResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: tour-tickets

  LoadTourTicketByDateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref LoadTourTicketByDateResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt LoadTourTicketByDateFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - LoadTourTicketByDateFunc  

# Start Function - ListBookingByEmailFunc  
  ListBookingByEmailFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-ListBookingByEmailFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: listBookingByEmail
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  ListBookingByEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListBookingByEmailFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking

  ListBookingByEmailResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: hotel-bookings

  ListBookingByEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ListBookingByEmailResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt ListBookingByEmailFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - ListBookingByEmailFunc  

# Start Function - InitBookingByIdFunc  
  InitBookingByIdFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-InitBookingByIdFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: initBookingById
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  InitBookingByIdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InitBookingByIdFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking/init-booking

  InitBookingByIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListBookingByEmailResource
      PathPart: init-booking

  InitBookingByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref InitBookingByIdResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt InitBookingByIdFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - InitBookingByIdFunc 

# Start Function - ForwardHotelBookingFunc  
  ForwardHotelBookingFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-ForwardHotelBookingFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: forwardHotelBooking
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  ForwardHotelBookingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ForwardHotelBookingFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking/forward

  ForwardHotelBookingResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListBookingByEmailResource
      PathPart: forward

  ForwardHotelBookingMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ForwardHotelBookingResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt ForwardHotelBookingFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - ForwardHotelBookingFunc 

# Start Function - CancelForwardHotelBookingFunc  
  CancelForwardHotelBookingFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-CancelForwardHotelBookingFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: cancelForwardHotelBooking
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  CancelForwardHotelBookingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CancelForwardHotelBookingFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking/cancel-forward

  CancelForwardHotelBookingResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListBookingByEmailResource
      PathPart: cancel-forward

  CancelForwardHotelBookingMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref CancelForwardHotelBookingResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt CancelForwardHotelBookingFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - CancelForwardHotelBookingFunc  

# Start Function - ViewKYCHotelBookingFunc  
  ViewKYCHotelBookingFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-ViewKYCHotelBookingFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: viewKYCHotelBooking
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  ViewKYCHotelBookingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ViewKYCHotelBookingFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/kyc-hotel-booking

  ViewKYCHotelBookingResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: kyc-hotel-bookings

  ViewKYCHotelBookingMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ViewKYCHotelBookingResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt ViewKYCHotelBookingFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - ViewKYCHotelBookingFunc  

# Start Function - AddBookingKYCFunc  
  AddBookingKYCFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-AddBookingKYCFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: addBookingKYC
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  AddBookingKYCPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddBookingKYCFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/kyc-hotel-booking/add-kyc-info

  AddBookingKYCResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ViewKYCHotelBookingResource
      PathPart: add-kyc-info

  AddBookingKYCMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref AddBookingKYCResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt AddBookingKYCFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - AddBookingKYCFunc  

# Start Function - AddKYCInfoFunc  
  AddKYCInfoFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-AddKYCInfo'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: addKYCInfo
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword          
      Runtime: java11
      Timeout: 60
      MemorySize: 2048
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  AddKYCInfoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddKYCInfoFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/kyc-info/add
      
  ListKYCInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: kyc-info
      
  AddKYCInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListKYCInfoResource
      PathPart: add

  AddKYCInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref AddKYCInfoResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt AddKYCInfoFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ComeInRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End Function - AddKYCInfoFunc  
                              
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
